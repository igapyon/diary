<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML lang="ja">
<HEAD>
<TITLE>2007/07/05 日記: FizzBuzz 問題 - 短くしていく版</TITLE>
<META name="DESCRIPTION" content="では、次に FuzzBuzz実装を短くしていく版を作ってみます。">
<META name="KEYWORDS" content="FizzBuzz,Java,問題,problem,short">
<META name="GENERATOR" content="IBM WebSphere Studio Homepage Builder Version 11.0.0.0 for Windows">
<META name="DATE" content="2010-09-27T20:42:50+09:00">
<META http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<META http-equiv="Content-Style-Type" content="text/css">
<LINK rel="INDEX" href="index.html">
<LINK rel="CONTENTS" href="index.html">
<LINK rel="stylesheet" href="../../css/table.css" type="text/css" id="_HPB_TABLE_CSS_ID_">
</HEAD>
<BODY bgcolor="#eeddcc">
<TABLE border="0"><TBODY><TR>
  <TD valign="top">
    <A href="../memo/memoigapyon.html">
      <IMG src="../../image/iga200306s.jpg" border="0" ALT="いがぴょん画像(小) 2003/06">
    </A>
  </TD>
  <TD valign="top">
    <H2>2007/07/05 日記: FizzBuzz 問題 - 短くしていく版</H2>
    <P>[FizzBuzz,Java,問題,problem,short] では、次に FuzzBuzz実装を短くしていく版を作ってみます。</P>
  </TD>
</TR></TBODY></TABLE>

<!-- adv -->
<CENTER>
<TABLE bgcolor="#ffff00" summary="adv">
  <TBODY>
    <TR>

      <TD align="center">広告: <A href="http://journal.mycom.co.jp/column/ide/091/">イマドキのIDE事情: Eclipseベースの統合翻訳環境「Benten」を使ってみよう</A> <FONT color="#ff0000" size="-1">09/27</FONT><BR>
        <FONT size="-1">たげぞうさんの手による Benten 紹介記事!</FONT></TD>

    </TR>
  </TBODY>
</TABLE>
</CENTER>
<!-- adv -->




<P> </P>

<DIV align="right">
<TABLE cellpadding="4">
  <TBODY>
    <TR bgcolor="#99ccff">
      <TD><A href="../idxall.html">インディックスページへ戻る</A></TD>
    </TR>
  </TBODY>
</TABLE>
</DIV>



<TABLE summary="mini title">
  <TBODY>
    <TR>
      <TD bgcolor="#ff9900" valign="top"><FONT color="#ffffff" size="+1"><STRONG>FizzBuzz 問題 - 短くしていく版</STRONG></FONT></TD>
    </TR>
  </TBODY>
</TABLE>
<P>では、次に FuzzBuzz実装を短くしていく版を作ってみます。</P>
<P>※注意: ここで挙げている例は <STRONG>ブラックユーモア</STRONG>です。</P>
<P>最初に思いつくのは 文字列連結によるソースコードの短縮についてです。</P>
<BLOCKQUOTE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD bgcolor="#ffff00">FizzBuzzShort01.java</TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD>
      <pre>/**
 * FizzBuzz: イギリスの学校の子供たちの遊び
 * 
 * 1から100までの数をプリントする。&lt;br&gt;
 * ・3の倍数のときは数の代わりに｢Fizz｣とプリントする。&lt;br&gt;
 * ・5の倍数のときは数の代わりに｢Buzz｣とプリントする。&lt;br&gt;
 * ・3と5両方の倍数の場合には数の代わりに｢FizzBuzz｣とプリントする。
 */
public class FizzBuzzShort01 {
        /**
         * エントリポイント。
         * 
         * @param args
         *            コマンドライン引数。このプログラム内では利用されない。
         */
        public static void main(final String[] args) {
                // TODO:踏み込んだ共通化を行い、ロジックを組み替えました。
                // TODO:マジックナンバーは追放されていません。
                for (int number = 1; number &lt;= 100; number++) {
                        // 3の倍数であるかどうか。
                        final boolean isMultipleOf3 = (number % 3 == 0);
                        // 5の倍数であるかどうか。
                        final boolean isMultipleOf5 = (number % 5 == 0);

                        final StringBuffer bufMsg = new StringBuffer();
                        if (isMultipleOf3) {
                                // 3の倍数のときは｢Fizz｣を追加する。
                                bufMsg.append(&quot;Fizz&quot;);
                        }
                        if (isMultipleOf5) {
                                // 5の倍数のときは｢Buzz｣を追加する。
                                bufMsg.append(&quot;Buzz&quot;);
                        }
                        if (!isMultipleOf3 &amp;&amp; !isMultipleOf5) {
                                // 3の倍数でも5の倍数でも無い時には、数をセットする。
                                bufMsg.append(number);
                        }

                        // 生成された文字列をプリントする。
                        System.out.println(bufMsg.toString());
                }
        }
}</pre>
      </TD>
    </TR>
  </TBODY>
</TABLE>
</BLOCKQUOTE>
<P>ロジックの組み替えにより 少しずつ短くなっていきます。</P>
<HR>
<P>3項演算子を利用すると、if 文を省略でき、もっと短くなります。</P>
<BLOCKQUOTE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD bgcolor="#ffff00">FizzBuzzShort02.java</TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD>
      <PRE>/**
 * FizzBuzz: イギリスの学校の子供たちの遊び
 * 
 * 1から100までの数をプリントする。&lt;br&gt;
 * ・3の倍数のときは数の代わりに｢Fizz｣とプリントする。&lt;br&gt;
 * ・5の倍数のときは数の代わりに｢Buzz｣とプリントする。&lt;br&gt;
 * ・3と5両方の倍数の場合には数の代わりに｢FizzBuzz｣とプリントする。
 */
public class FizzBuzzShort02 {
        /**
         * エントリポイント。
         * 
         * @param args
         *            コマンドライン引数。このプログラム内では利用されない。
         */
        public static void main(final String[] args) {
                // TODO:3項演算子を用いて、ロジックを組み替えました。
                // TODO:マジックナンバーは追放されていません。
                for (int number = 1; number &lt;= 100; number++) {
                        // 3の倍数であるかどうか。
                        final boolean isMultipleOf3 = (number % 3 == 0);
                        // 5の倍数であるかどうか。
                        final boolean isMultipleOf5 = (number % 5 == 0);

                        final String strMsg = (isMultipleOf3 ? &quot;Fizz&quot; : &quot;&quot;)
                                        + (isMultipleOf5 ? &quot;Buzz&quot; : &quot;&quot;)
                                        + (!isMultipleOf3 &amp;&amp; !isMultipleOf5 ? String
                                                        .valueOf(number) : &quot;&quot;);

                        // 生成された文字列をプリントする。
                        System.out.println(strMsg);
                }
        }
}</PRE>
      </TD>
    </TR>
  </TBODY>
</TABLE>
</BLOCKQUOTE>
<P>ああ、三項演算子は とても素晴らしい！</P>
<HR>
<P>ここまで来たら、文字列を格納していた変数を無くすことが出来ます。</P>
<BLOCKQUOTE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD bgcolor="#ffff00">FizzBuzzShort03.java</TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD>
      <PRE>/**
 * FizzBuzz: イギリスの学校の子供たちの遊び
 * 
 * 1から100までの数をプリントする。&lt;br&gt;
 * ・3の倍数のときは数の代わりに｢Fizz｣とプリントする。&lt;br&gt;
 * ・5の倍数のときは数の代わりに｢Buzz｣とプリントする。&lt;br&gt;
 * ・3と5両方の倍数の場合には数の代わりに｢FizzBuzz｣とプリントする。
 */
public class FizzBuzzShort03 {
        /**
         * エントリポイント。
         * 
         * @param args
         *            コマンドライン引数。このプログラム内では利用されない。
         */
        public static void main(final String[] args) {
                // TODO:不要な文字列変数を削除しました。また変数名をリファクタリングしました。
                // TODO:マジックナンバーは追放されていません。
                for (int number = 1; number &lt;= 100; number++) {
                        // 3の倍数であるかどうか。
                        final boolean isFizz = (number % 3 == 0);
                        // 5の倍数であるかどうか。
                        final boolean isBuzz = (number % 5 == 0);

                        System.out.println((isFizz ? &quot;Fizz&quot; : &quot;&quot;) + (isBuzz ? &quot;Buzz&quot; : &quot;&quot;)
                                        + (!isFizz &amp;&amp; !isBuzz ? String.valueOf(number) : &quot;&quot;));
                }
        }
}</PRE>
      </TD>
    </TR>
  </TBODY>
</TABLE>
</BLOCKQUOTE>
<P>まだ、いろいろ出来そうですが、ひとまずここで手を止めます。</P>
<P>さて、ここで注意しなくてはならないのは、短くしていく版として記述されたソースコードは <A href="ig070703.html">FizzBuzz 問題 - リファクタリング版</A> のソースコードよりも JavaVM上での<STRONG>実行効率が低い</STRONG>可能性があるという点です。Java 5 以降の StringBuilderによる内部展開を期待したとしても オブジェクトのゴミが多く発生する分、<A href="ig070703.html">FizzBuzz 問題 - リファクタリング版</A> よりも実行効率が悪くなると想定されるからです…。訓練された Javaプログラマーは ソースコードを見ただけで そこで実行した際のメモリゴミの概算ができるものです。行数の多い
<A href="ig070703.html">FizzBuzz 問題 - リファクタリング版</A>のほうが メモリ効率が良いなんて 不思議で皮肉なものですね…。</P>
<P>一方で、いくら短く記述するためとはいえ、15などの数 (3と5の共通の倍数) を導出したり、あるいは isFizz, isBuzzという変数を省略してしまいたい
(省略すると演算の回数が増えてしまう) 衝動にかられるかも知れません。しかし それを省略すると 剰余計算の回数が増え、実行効率は低下するように考えられます。</P>
<P>更に、15などという数値を導出してしまうと、そもそも仕様上には現れない 謎のマジックナンバーがソースコード上に現れることになります。このような数値を導出すると、ソースコードが仕様変更に対して脆弱になってしまう点にも注意が必要です。仕様変更のコントロール権を完全に掌握していないのであれば、なるべく「仕様通り」に実装しておくのが肝心なのです。</P>
<P><FONT color="#ff00ff">関連する日記</FONT></P>
<UL>
  <LI><A href="ig070702.html">2007/07/02 日記: FizzBuzz 問題 - ノーマル版</A>
  <LI><A href="ig070703.html">2007/07/03 日記: FizzBuzz 問題 - リファクタリング版</A>
  <LI><A href="ig070704.html">2007/07/04 日記: FizzBuzz 問題 - デザインパターン適用版</A>
  <LI><A href="ig070706.html">2007/07/06 日記: FizzBuzz 問題 - switch分岐版</A>
</UL>
<HR>
<address><A HREF="../memo/memoigapyon.html">いがぴょんについて</A><BR>
Last modified: $Date: 2010/09/27 20:42:50 $</address>
</BODY>
</HTML>
