<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML lang="ja">
<HEAD>
<TITLE>2009/01/04 日記: ソースコード自動生成に対する一般的な考察</TITLE>
<META name="DESCRIPTION" content="私は昔からソースコード自動生成に取り組んできました。そして、2005年からは blanco Framework] というオープンソース・プロダクトを通じてソースコード自動生成に取り組んできました。これらの経験ものとに、特に一般的だと考えられる点について考察してメモしておきます。">
<META name="KEYWORDS" content="いがぴょんの日記v2,diary,igapyon">
<META name="GENERATOR" content="IBM WebSphere Studio Homepage Builder Version 11.0.3.0 for Windows">
<META name="DATE" content="2010-09-27T20:42:50+09:00">
<META http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<META http-equiv="Content-Style-Type" content="text/css">
<LINK rel="INDEX" href="index.html">
<LINK rel="CONTENTS" href="index.html">
<LINK rel="stylesheet" href="../../css/table.css" type="text/css" id="_HPB_TABLE_CSS_ID_">
</HEAD>
<BODY bgcolor="#eeddcc">
<TABLE border="0"><TBODY><TR>
  <TD valign="top">
    <A href="../memo/memoigapyon.html">
      <IMG src="../../image/iga200306s.jpg" border="0" ALT="いがぴょん画像(小) 2003/06">
    </A>
  </TD>
  <TD valign="top">
    <H2>2009/01/04 日記: ソースコード自動生成に対する一般的な考察</H2>
    <P>[いがぴょんの日記v2,diary,igapyon] 私は昔からソースコード自動生成に取り組んできました。そして、2005年からは blanco Framework] というオープンソース・プロダクトを通じてソースコード自動生成に取り組んできました。これらの経験ものとに、特に一般的だと考えられる点について考察してメモしておきます。</P>
  </TD>
</TR></TBODY></TABLE>

<!-- adv -->
<CENTER>
<TABLE bgcolor="#ffff00" summary="adv">
  <TBODY>
    <TR>

      <TD align="center">広告: <A href="http://journal.mycom.co.jp/column/ide/091/">イマドキのIDE事情: Eclipseベースの統合翻訳環境「Benten」を使ってみよう</A> <FONT color="#ff0000" size="-1">09/27</FONT><BR>
        <FONT size="-1">たげぞうさんの手による Benten 紹介記事!</FONT></TD>

    </TR>
  </TBODY>
</TABLE>
</CENTER>
<!-- adv -->




<P> </P>

<DIV align="right">
<TABLE cellpadding="4">
  <TBODY>
    <TR bgcolor="#99ccff">
      <TD><A href="../idxall.html">インディックスページへ戻る</A></TD>
    </TR>
  </TBODY>
</TABLE>
</DIV>



<TABLE summary="mini title">
  <TBODY>
    <TR>
      <TD bgcolor="#ff9900" valign="top"><FONT color="#ffffff" size="+1"><STRONG>ソースコード自動生成に対する一般的な考察</STRONG></FONT></TD>
    </TR>
  </TBODY>
</TABLE>
<P>私は昔からソースコード自動生成に取り組んできました。そして、2005年からは <A HREF="http://www.igapyon.jp/blanco/blanco.ja.html" TITLE="blanco Framework は オープンソースで提供されている blancoDbやblancoStrutsなどの集合体です。基本的に Javaソースコード自動生成を主たる目的とします。">blanco Framework</A>
というオープンソース・プロダクトを通じてソースコード自動生成に取り組んできました。これらの経験ものとに、特に一般的だと考えられる点について考察してメモしておきます。</P>
<P><STRONG><FONT color="#ff00ff">まずは歴史を知っておこう</FONT></STRONG></P>
<P>ソースコード自動生成を考えるにあたり、先人たちが 20世紀からおこなってきた様々なソースコード自動生成の取り組みについて知っておく必要があります。この点については、以前、＠ITの記事の導入部に概略を記載しました。</P>
<UL>
  <LI><A href="http://www.atmarkit.co.jp/fjava/special/blanco/blanco_1.html">＠IT: Excelからプログラムを作る多言語対応オープンソース </A>
</UL>
<P>この記事からもわかるように、ソースコード自動生成という取り組みは、とても「古くさい」ものなのです。昔からたくさんの人たちや企業が取り組んできた「常識」なのです。どのようなメリット・デメリットがあるのかについても、すでに多くの知見、多くの人的あるいは金銭的投資、そして多くの失敗が積み重ねられてきている、もはや歴史のあるジャンルなのです。(☆なぜ、ここまで強調するのかというと、いまだに歴史を調べずにソースコード自動生成に取り組む人が多く存在しているようだからです)</P>
<P><STRONG><FONT color="#ff00ff">メリットを導き出すと、デメリットがセットで発生します</FONT></STRONG></P>
<P>コンピュータ・システムで何かメリットを導き出そうとすると、必ずと言っていいほどデメリットが発生してしまいます。(☆これは、ソフトウェア工学の世界では常識の内容であることでしょう)<BR>
ソースコード自動生成も例外ではありません。何かを自動生成すると、ほぼ確実にデメリットが発生します。これは重要なことです。あなたは ソースコード自動生成に取り組む際には、何かを効率化して、その代償として
何かを犠牲にする必要があるのです。違う言い方をすると、目的をはっきりもって、デメリットが発生することを承知の上で、ソースコード自動生成に取り組む必要があるということです。これ以降の様々なコストも勘案したうえで、バランスが取れたシステム化・機械化が求められます。</P>
<P><STRONG><FONT color="#ff00ff">○○システムを導入すると、教育コストが発生します</FONT></STRONG></P>
<P>メリットとデメリットとがセットで発生する、もっともイメージしやすいものが教育コストです。(そしてツールの設計時に、忘れられやすいもののひとつでもあります)
一般的に、何かシステムを導入すると 少なからず教育コストが発生します。ソースコード自動生成のためのツールも例外ではありません。そもそも見方を変えると立派な○○システムなのです。悲しいことに、ソースコード自動生成ツールが多機能になればなるほど、教育コストは増大していく傾向にあります。</P>
<P>例として、ソースコード自動生成ツールをシステム開発プロジェクトに導入する例を考えてみましょう。そのシステム開発プロジェクトに従事する人が そのツールの経験が無い場合、ほとんど強制的に教育コストが必要になってしまいます。ツールがデファクト・スタンダード(事実上の標準)にでもなっていないかぎり、確実に初期稼働が発生してしまうのです。このコストは、ツール設計者は最初から見積もっておく必要があるように考えます。こういった事情から、ソースコード自動生成の効果が教育コストに見合わない場合には、ソースコード自動生成の範囲やツールの仕様を見直す必要があるのです。これは、特にツールを適用するプロジェクトの期間が短ければ短いほど致命的な欠点となります。</P>
<BLOCKQUOTE>私の経験などでは、どうもツール作成者は 何が何でも徹底的にやってしまう、そういう傾向があるように見受けられます。でも、これではうまくいかないのです。目的をはっきり持って、最大のリスク要因のひとつである教育コストとのバランスをしっかり見極める必要があるのです。</BLOCKQUOTE>
<P>これは、ソースコード自動生成ツールという範囲以外においても発生します。ソースコード自動生成ツールかどうかにかかわらず、何かツールの標準教育コストをリストアップしておくことは有益であろうと考えます。</P>
<UL>
  <LI>○○フレームワーク
  <UL>
    <LI>例: Spring フレームワーク。<BR>
    コスト算出例: データベース入出力をともなった Hello World! アプリケーションを実行できるようになるまで、最低でも 5営業日が必要です。
  </UL>
  <LI>市場で流行最先端の○○プログラミング言語
  <UL>
    <LI>コスト算出例: データベース入出力をともなった Hello World! アプリケーションを実行できるようになるまで、最低でも 5営業日が必要です。
    <LI>コストにまつわるその他のリスク: 流行最先端の新しめなプログラム言語であるため、市場で要員を確保する際のコストが割高になる。
  </UL>
  <LI>… といったものが、さまざま、そしてたくさん存在していることに留意してリストアップしておく必要があります。そして、従事する人数が多いほど、この初期コストが線形に増大するという点に気をとめてください。
</UL>
<P>初期教育コストという話題だと、一方で (不思議あるいはジレンマなこととしては) SQL 言語、Java 言語、JSP + Apache Struts、Eclipse
統合開発環境などといった広く普及しているツールの初期教育コストが低く見積もることが可能である点にも注意が必要です。というのも、普及して且つ良く利用されるものについては、それらを
ほぼ 常識として扱って、初期教育コストから除外することが可能である場合があるためです。<BR>
※たまたまこの日記を書いた時点では、これらが広く普及していた。</P>
<P><STRONG><FONT color="#ff00ff">ソフトウェア・システムの寿命と、ソースコード自動生成との関係</FONT></STRONG></P>
<P>一般的に、自動生成されたソースコードを手動で編集してはなりません。設計情報からのソースコードの再生成が実行できなくなってしまうからです。この点はソースコード自動生成の歴史が指し示す最大の示唆です。ところが、ところがです。この日記を書いている時点では、自動生成したソースコードを手動編集させるような
○○システムなるものが、まだまだ多く存在しています。これは残念なことです。歴史を知らずにやってしまっているのか、あるいは歴史を知った上で、デメリットを覚悟で強行しているのか、それは私には分かりかねます…。<BR>
※一般的には、<A href="http://www.atmarkit.co.jp/fjava/special/blanco/blanco_1.html">＠IT: Excelからプログラムを作る多言語対応オープンソース </A> にあるように、ジェネレーションギャップ・デザインパターンやフック・パターンを用いて、この欠点を回避します。</P>
<P>もちろん、これは開発したシステム・プログラムの寿命と深い関係があります。システム寿命が極端に短い、あるいはシステムのメンテナンスの必要がほとんどない場合には、ソースコードの再生成なんて考える必要はありません。一方、組み込みシステムで
何かしらの事情によって制約があり、最適解が利用できないなどの場合にも、これは当てはまらないことでしょう。</P>
<P>逆に考えると、そのような よほど特殊な事情でもないかぎり、一定期間保守する必要のあるシステムの開発においてはソースコード自動生成の再実行が考慮されていないソースコード自動生成の仕組みを構築してはなりません。</P>
<P><STRONG><FONT color="#ff00ff">ソフトウェア構造化 (コード体系、モジュール分割、パッケージ構造) の重要性</FONT></STRONG></P>
<P>一般的に、ある程度の規模をもったソフトウェアを開発する場合には、何かしらソフトウェアの構造化を考慮しておく必要があります。そしてソースコード自動生成を行う場合には、妥当なコード体系の構築、適切なモジュール分割
(コンパイル単位、ソースコード自動生成単位、jar 単位)、妥当なパッケージの構造といったものを熟慮しておく必要があるのです。経験的には、システムの都合による分割ではなく、業務などの意味による分割が、もっともうまくいくと考えます。<BR>
これは構成管理とも強いつながりがあるものです。自動生成したソースコードの構成管理における考え方も、明確化しておく必要があります。</P>
<P>一方で、ソースコード自動生成を導入することにより、ソースコードの均質化が機械的に実現できることが期待できます。</P>
<P><STRONG><FONT color="#ff00ff">開発プロセスの変更を強要するものが存在します</FONT></STRONG></P>
<P>一般的に、何か生産性・保守性を改善する取り組みの中には、開発プロセスの変更を強要するものがあります。ところが、開発プロセスの変更はコストやリスクを伴うものが多いです。これは初期教育コストとも強いつながりがあります。<BR>
ソースコード自動生成の仕組みの都合上、開発プロセスの変更を強要するものも多いように考えます。でも、あなたのシステム開発プロジェクトで、開発プロセスの変更が可能かどうかについて、妥当性を検証する必要がある点に留意してください。多くの場合、開発プロセスはシステム開発より前に既に決まってしまっている場合が多い点も重要です。</P>
<P>例えば、ドメイン事前登録を必要とするソースコード自動生成ツールは、システムの開発プロセスがウォーターフォール (あるいはウォーターフォール的)
になっていることを前提条件としているものが多いです。ところが、ところがです。いくつかのプロジェクトでは (そして正常ではないプロジェクトにおいて)、設計工程の遅れから
ちゃんと設計が決まっていないのに製造しなくてはならない、などという場合があります。そのような場合に、ドメイン事前登録タイプのツールだと、恐ろしいことに開発が止まってしまう恐れがあるのです。(すべてのツールがそうなっているわけではありません)</P>
<P><STRONG><FONT color="#ff00ff">自由度、あるいは拡張時の特殊さ</FONT></STRONG></P>
<P>ソースコード自動生成ツールの中には、生産性は高いのだけれども自由度が低いものがあります。少し変わったことをしようとすると、対応できない、あるいは対応できるのだけれども該当箇所だけ
それまでとは全く異なる特殊な記述方法になる、というものがあります。<BR>
あなたが従事しようとしているプロジェクトと、そのツールの制限範囲とのギャップが大きい、あるいは大きくなるリスクが高い場合には、自由度の低さや例外対応の特殊さに悩まされるリスクが高いと考える必要があります。</P>
<P><STRONG><FONT color="#ff00ff">XML シンドローム</FONT></STRONG></P>
<P>世間の生産性向上ツールの中には、生産性・保守性向上の裏に XML 記述を必要とするタイプのものがあります。その XML を手動で編集するものは要注意です。そのメリットの裏側に、大量の
XML 記述を強要するタイプのツールには、特に注意が必要です。</P>
<P>ソースコードと XML と、いずれのほうがコストが高いかについては、ケースバイケース、あるいは工程によって異なるでしょうね。でも、XML を手書きさせられることによる生産性の低下現象は、世の中の多くのプロジェクトでその発生必然性が実証されています。感覚的な表現だと、XML
が開発者の経験値やソースコードの可読性といったものを台無しにしているような感じ、そんなところです。<BR>
※この日記の記述時点では、世間一般の XML リテラシーがそんなに高くないことも原因と考えられます。XML 整形式かどうかのチェックが出来ない開発者が、依然多く存在しているのです。</P>
<P><STRONG><FONT color="#ff00ff">なぜか不人気な SQL</FONT></STRONG></P>
<P>XML シンドロームとセット的に不思議なのが、なぜか不人気な SQL のことについてです。SQL を手動で編集しないと実現しにくいシステムは多く存在します。一般的に、データベース・スキーマの正規化
(そして逆正規化) が一定レベル以上実施されている場合には、SQL は手動で編集しなくちゃならないんです。ところが、ツール開発者の中に、SQL
を嫌う傾向の人がいて、そういう人が作ったツールは SQL を手動で編集しないといけない現場に対応できない、あるいは対応しにくいものがあります。</P>
<P>リレーショナル・データベースを伴ったシステムの場合、SQL の記述は必要悪だと私は考えています。むしろ SQL は、異なるリレーショナル・データベース間でも一定の標準化がすでに実現されている、枯れて安全な言語です。集合の概念を扱う場合には、SQL
は積極的に利用されるべき常識のひとつと考えます。</P>
<P><STRONG><FONT color="#ff00ff">分散開発への対応度</FONT></STRONG></P>
<P>システム開発コストの低減化やオフショア開発、そしてアウトソーシングなど、システム開発を巡る状況は過酷なものがあります。そういった中、分散してシステムを開発することは、比較的普通のできごとです。<BR>
、、、ところが、世の中のソースコード自動生成ツールのなかには、分散開発への対応が考慮されていない、あるいは分散開発への対応レベルが低いものがあります。特にドメインを事前に登録するタイプのものに、分散開発への対応レベルが低いものがあるので注意が必要です。</P>
<P><STRONG><FONT color="#ff00ff">その他のコスト</FONT></STRONG></P>
<P>それ以外にも、以下のようなコストが予見されます。予め適切に見積もっておきましょう。</P>
<UL>
  <LI>(ソースコード自動生成) ソフトウェアの購入コストおよび保守コスト<BR>
  ※特に商用ソフトウェアの場合に重要。
  <LI>ツールのインストールに必要な手間や時間のコスト。
  <LI>ソースコード自動生成そのものに必要な CPU および時間のコスト
  <LI>… etc
</UL>
<P><STRONG><FONT color="#ff00ff">変更履歴</FONT></STRONG></P>
<UL>
  <LI>2009-01-08: ひととおり記述完了
  <LI>2009-01-04: 新規作成。一部未記述
</UL>
<HR>
<address><A HREF="../memo/memoigapyon.html">いがぴょんについて</A><BR>
Last modified: $Date: 2010/09/27 20:42:50 $</address>
</BODY>
</HTML>
