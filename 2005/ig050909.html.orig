<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML lang="ja">
<HEAD>
<TITLE>2005/09/09 日記: Java: サンプル: ProgressService利用サンプル , SAXの具象化サンプル</TITLE>
<META name="DESCRIPTION" content="SAXについて ある程度 具象化していくと生産性と保守性が向上するのではないかと考えています。">
<META name="KEYWORDS" content="いがぴょんの日記v2,diary,igapyon">
<META name="GENERATOR" content="IBM WebSphere Studio Homepage Builder Version 9.0.1.0 for Windows">
<META name="DATE" content="2010-09-27T20:42:49+09:00">
<META http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<META http-equiv="Content-Style-Type" content="text/css">
<LINK rel="INDEX" href="index.html">
<LINK rel="CONTENTS" href="index.html">
<LINK rel="stylesheet" href="../../css/table.css" type="text/css" id="_HPB_TABLE_CSS_ID_">
</HEAD>
<BODY bgcolor="#eeddcc"><TABLE border="0"><TBODY><TR>
  <TD valign="top">
    <A href="../memo/memoigapyon.html">
      <IMG src="../../image/iga200306s.jpg" border="0" ALT="いがぴょん画像(小) 2003/06">
    </A>
  </TD>
  <TD valign="top">
    <H2>2005/09/09 日記: Java: サンプル: ProgressService利用サンプル , SAXの具象化サンプル</H2>
    <P>[いがぴょんの日記v2,diary,igapyon] SAXについて ある程度 具象化していくと生産性と保守性が向上するのではないかと考えています。</P>
  </TD>
</TR></TBODY></TABLE>

<!-- adv -->
<CENTER>
<TABLE bgcolor="#ffff00" summary="adv">
  <TBODY>
    <TR>

      <TD align="center">広告: <A href="http://journal.mycom.co.jp/column/ide/091/">イマドキのIDE事情: Eclipseベースの統合翻訳環境「Benten」を使ってみよう</A> <FONT color="#ff0000" size="-1">09/27</FONT><BR>
        <FONT size="-1">たげぞうさんの手による Benten 紹介記事!</FONT></TD>

    </TR>
  </TBODY>
</TABLE>
</CENTER>
<!-- adv -->




<P> </P>

<DIV align="right">
<TABLE cellpadding="4">
  <TBODY>
    <TR bgcolor="#99ccff">
      <TD><A href="../idxall.html">インディックスページへ戻る</A></TD>
    </TR>
  </TBODY>
</TABLE>
</DIV>



<TABLE summary="mini title">
  <TBODY>
    <TR>
      <TD bgcolor="#ff9900" valign="top"><FONT color="#ffffff" size="+1"><STRONG>Eclipse: Java: ProgressService利用サンプル</STRONG></FONT></TD>
    </TR>
  </TBODY>
</TABLE>
<P>プログレスダイアログを表示したかったのですが、最終的には ProgressServiceを利用することにしました。</P>
<BLOCKQUOTE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD bgcolor="#ffff00">ProgressService利用サンプル</TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD>
      <pre>プラグインプロジェクト
Plug-in with a popup menuで動作確認

    public void run(IAction action) {
        try {
            PlatformUI.getWorkbench().getProgressService().busyCursorWhile(
                    new IRunnableWithProgress() {
                        public void run(IProgressMonitor monitor)
                                throws InvocationTargetException,
                                InterruptedException {
                            try {
                                monitor.beginTask(&quot;うそうそタスク&quot;, 100);
                                for (int index = 0; index &lt; 100; index++) {
                                    if (monitor.isCanceled()) {
                                        break;
                                    }
                                    monitor.subTask(&quot;処理[&quot; + index + &quot;]&quot;);
                                    monitor.worked(1);
                                    Thread.sleep(50);
                                }
                            } finally {
                                monitor.done();
                            }
                        }
                    });
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }</pre>
      </TD>
    </TR>
  </TBODY>
</TABLE>
</BLOCKQUOTE>
<P>私の気のせいかも知れませんが、このProgressServiceを利用するたびに 300KB程度のメモリリークが発生しているような気がします。(Eclipse
3.0.2および Eclipse 3.1.0において)<BR>
他の方でも同様の現象の発生に成功された方は、是非 Eclipseプロジェクトにバグ報告していただけると幸いです。</P>
<TABLE summary="mini title">
  <TBODY>
    <TR>
      <TD bgcolor="#ff9900" valign="top"><FONT color="#ffffff" size="+1"><STRONG>Java: SAXの具象化</STRONG></FONT></TD>
    </TR>
  </TBODY>
</TABLE>
<P>SAXの具象化について、blancoIgベースで試作しました。入力データをもとに SAXインタフェースを具象化します。(XMLを手がかりにアクセサソースコードを生成するというスタイルは、Relaxerと
やや似たアプローチとなっていると思われます。)<BR>
これは、整備して<A HREF="http://www.igapyon.jp/blanco/blancosoap.html" TITLE="「電文処理定義書」および「電文定義書」という Excelブックから、Webサービスを利用するためのソースコード等を自動生成します。">blancoSOAP</A> に合流させていきます。</P>
<P>残項目は下記のようになります。</P>
<UL>
  <LI>ConcreteSax で 今は localNameで分岐していますが、これをqNameベースで分岐したほうが精度が上がるように考えます。(その結果
  分岐が ほぼユニークになると考えます。)
  <LI>今はコンテンツハンドラのSAX具象化だけですが、コンテンツシリアライザのSAX具象化にも価値があると考えます。
  <LI>サンプルデータのサイズ次第で、charactersが一発モードあるいはパケットモードと分岐して生成すべきと考えています。
</UL>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD bgcolor="#ffff00">BlancoXml2ConcreteSax.java</TD>
    </TR>
  </TBODY>
</TABLE>
<TABLE border="1">
  <TBODY>
    <TR>
      <TD><pre>import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Stack;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;

import blanco.ig.expander.ClassExpander;
import blanco.ig.expander.NameAdjuster;
import blanco.ig.expander.Type;
import blanco.ig.expander.Value;
import blanco.ig.expander.field.PrivateField;
import blanco.ig.expander.method.MethodExpander;
import blanco.ig.generator.GeneratorSetting;
import blanco.ig.generator.ImplementGenerator;
import blanco.ig.service.ServiceClass;

/**
 * 解析用XMLを入力して具象化SAXを生成します。&lt;br&gt;
 * 入力する解析用XMLファイルは、恣意的なものを準備します。現時点では かなり限定的なものになります。&lt;br&gt;
 * 仮定1: 解析用XMLのアトリビュートはすべて指定されて来るものと仮定します。&lt;br&gt;
 * 仮定2: 異なる階層において同じ名前のエンティティが存在しないものと仮定します。&lt;br&gt;
 * 仮定3: implements ContentHandler を現状では生成後ファイルに追記の必要があります。&lt;br&gt;
 * 参考:http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/org/xml/sax/ContentHandler.html&lt;br&gt;
 * TODO: charatersについて、集約の上呼びわけを行うべきかどうかを考察。
 * 
 * @author IGA Tosiki
 */
public class BlancoXml2ConcreteSax {
    private static final NameAdjuster adjuster = new NameAdjuster();

    // 解析しているXMLファイルの各種情報を記憶します。

    /**
     * エレメントのスタック構造を記憶します。
     */
    private final Stack elementStack = new Stack();

    /**
     * エレメントをハッシュテーブル形式で記憶します。
     */
    private final Hashtable currentElementHashtable = new Hashtable();

    /**
     * 登場したエレメントすべてを記憶します。
     */
    private final Hashtable totalElementHashtable = new Hashtable();

    /**
     * 
     * @param args
     */
    public static void main(String[] args) {
        new BlancoXml2ConcreteSax().process(new File(&quot;./meta/web.xml&quot;),
                &quot;blanco&quot;, &quot;myPackage&quot;, &quot;MyConcreteSax2&quot;);
    }

    /**
     * ソースコード生成処理を実行します。
     * 
     * @param sourceFile
     * @param targetDirectory
     * @param packageName
     * @param className
     */
    public void process(final File sourceFile, final String targetDirectory,
            final String packageName, final String className) {
        final ClassExpander classExpander = getClassExpander(sourceFile,
                packageName, className);

        // 実際にJavaソースコードを生成します。
        GeneratorSetting setting = new GeneratorSetting();
        // 出力先ディレクトリを設定します。
        setting.setWorkDirectory(targetDirectory);
        ImplementGenerator implementGenerator = new ImplementGenerator(
                new ServiceClass(&quot;DummyService&quot;), setting);
        // 作成したクラスを登録します。
        implementGenerator.addMain(classExpander);
        try {
            // 実際にソースコード生成を実行します。
            implementGenerator.generate();
            // System.out.println(&quot;ソースコード生成が完了しました。&quot;);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 実際のクラス展開を実行します。
     * 
     * @param sourceFile
     * @param packageName
     * @param className
     * @return
     */
    private ClassExpander getClassExpander(final File sourceFile,
            final String packageName, final String className) {
        return new ClassExpander(new Type(packageName, className)) {
            protected boolean isAbstract() {
                return true;
            }

            protected void expandClassStruct() {
                addFileComment(className + &quot;具象化SAXクラス&lt;br&gt;&quot;);
                getJavaDoc().addLine(className + &quot;具象化SAXクラス&lt;br&gt;&quot;);
                getJavaDoc().addLine(
                        &quot;このクラスは解析用XMLファイルを入力として具象化SAXクラスとして生成されました。&lt;br&gt;&quot;);
                getJavaDoc().addLine(&quot;このソースコードはblancoIgにより機械的に自動生成されています。&quot;);
                getJavaDoc()
                        .addLine(
                                &quot;TODO implements ContentHandler を書き加えてください。(blancoIgの不足機能への対応のため。)&quot;);
                getJavaDoc().addLine(&quot;&quot;);
                getJavaDoc().addLine(&quot;@author IGA Tosiki&quot;);

                // TODO blancoIgの仕様上 implements ContentHandler が足りません。

                // フィールド変数を宣言します。
                PrivateField field1 = new PrivateField(new Type(
                        &quot;java.util.Stack&quot;), &quot;elmentStack&quot;) {
                };
                field1.setLiteralValue(&quot;new Stack()&quot;);
                field1.getJavaDoc().addLine(&quot;エレメントのスタックです&lt;br&gt;&quot;);
                field1.getJavaDoc().addLine(&quot;XMLの階層構造を記憶します。&quot;);
                addField(field1);

                InputStream inStream = null;
                SAXResult result = new SAXResult(new ContentHandler() {
                    public void setDocumentLocator(Locator arg0) {
                    }

                    public void startDocument() throws SAXException {
                    }

                    public void endDocument() throws SAXException {
                        addMethod(new MethodExpander(&quot;startElement&quot;) {
                            public void setupSignature() {
                                setFinal(true);
                                getJavaDoc()
                                        .addLine(
                                                &quot;オリジナルのstartElementが呼び出されたので、具象メソッドに呼びわけます&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;uri&quot;, &quot;名前空間URI&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;uri&quot;));
                                getJavaDoc().addParameter(&quot;localName&quot;, &quot;ローカル名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;localName&quot;));
                                getJavaDoc().addParameter(&quot;qName&quot;, &quot;接頭辞付きの修飾名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;qName&quot;));
                                getJavaDoc()
                                        .addParameter(&quot;atts&quot;, &quot;アトリビュートのリスト&quot;);
                                addArgument(new Value(new Type(
                                        &quot;org.xml.sax.Attributes&quot;), &quot;atts&quot;));
                            }

                            public void implement() {
                                getData().addLine(
                                        &quot;_elmentStack.push(localName);&quot;);

                                Enumeration enumeration = totalElementHashtable
                                        .keys();
                                for (boolean isFirst = true; enumeration
                                        .hasMoreElements(); isFirst = false) {
                                    StringBuffer lineStatement = new StringBuffer();
                                    String key = (String) enumeration
                                            .nextElement();

                                    getData().addLine(
                                            (isFirst ? &quot;&quot; : &quot;else &quot;)
                                                    + &quot;if (localName.equals(\&quot;&quot;
                                                    + key + &quot;\&quot;)) {&quot;);

                                    lineStatement.append(&quot;startElement&quot;
                                            + adjuster.toClassName(key)
                                            + &quot;(uri, qName&quot;);
                                    ArrayList atts = (ArrayList) totalElementHashtable
                                            .get(key);

                                    final int attrLength = atts.size();
                                    for (int index = 0; index &lt; attrLength; index++) {
                                        // System.out.println(&quot;attr:&quot;
                                        // + (String) atts.get(index));
                                        if (index == 0) {
                                            lineStatement.append(&quot;, &quot;);
                                        } else {
                                            lineStatement.append(&quot;, &quot;);
                                        }
                                        lineStatement.append(&quot;atts.getValue(\&quot;&quot;
                                                + (String) atts.get(index)
                                                + &quot;\&quot;)&quot;);
                                    }
                                    lineStatement.append(&quot;);&quot;);
                                    getData().addLine(lineStatement.toString());

                                    getData().addLine(&quot;}&quot;);
                                }
                            }
                        });

                        addMethod(new MethodExpander(&quot;endElement&quot;) {
                            public void setupSignature() {
                                setFinal(true);
                                getJavaDoc()
                                        .addLine(
                                                &quot;オリジナルのendElementが呼び出されたので、具象メソッドに呼びわけます&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;uri&quot;, &quot;名前空間URI&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;uri&quot;));
                                getJavaDoc().addParameter(&quot;localName&quot;, &quot;ローカル名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;localName&quot;));
                                getJavaDoc().addParameter(&quot;qName&quot;, &quot;接頭辞付きの修飾名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;qName&quot;));
                            }

                            public void implement() {
                                getData()
                                        .addLine(
                                                &quot;final String currentElementOnStack = (String) _elmentStack.peek();&quot;);
                                getData()
                                        .addLine(
                                                &quot;if (currentElementOnStack.equals(localName) == false) {&quot;);
                                getData()
                                        .addLine(
                                                &quot;throw new SAXException(\&quot;XML異常。期待するエレメント[\&quot; + currentElementOnStack + \&quot;]とローカル名[\&quot; + localName + \&quot;]とがずれています.\&quot;);&quot;);
                                getData().addLine(&quot;}&quot;);

                                Enumeration enumeration = totalElementHashtable
                                        .keys();
                                for (boolean isFirst = true; enumeration
                                        .hasMoreElements(); isFirst = false) {
                                    StringBuffer lineStatement = new StringBuffer();
                                    String key = (String) enumeration
                                            .nextElement();

                                    getData().addLine(
                                            (isFirst ? &quot;&quot; : &quot;else &quot;)
                                                    + &quot;if (localName.equals(\&quot;&quot;
                                                    + key + &quot;\&quot;)) {&quot;);

                                    lineStatement.append(&quot;endElement&quot;
                                            + adjuster.toClassName(key)
                                            + &quot;(uri, qName);&quot;);
                                    getData().addLine(lineStatement.toString());

                                    getData().addLine(&quot;}&quot;);
                                }
                                getData().addLine(&quot;// 最後にポップして階層をひとつ戻します。&quot;);
                                getData().addLine(&quot;_elmentStack.pop();&quot;);
                            }
                        });

                        addMethod(new MethodExpander(&quot;characters&quot;) {
                            public void setupSignature() {
                                setFinal(true);
                                getJavaDoc()
                                        .addLine(
                                                &quot;オリジナルのcharactersが呼び出されたので、具象メソッドに呼びわけます&quot;);
                                getJavaDoc()
                                        .addLine(
                                                &quot;char[]で与えられたデータをStringに詰め替えた上で 呼びわけを行います。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;ch&quot;, &quot;XML文書の文字&quot;);
                                addArgument(new Value(new Type(&quot;char[]&quot;), &quot;ch&quot;));
                                getJavaDoc().addParameter(&quot;start&quot;, &quot;配列内の開始位置&quot;);
                                addArgument(new Value(new Type(&quot;int&quot;), &quot;start&quot;));
                                getJavaDoc().addParameter(&quot;length&quot;,
                                        &quot;配列から読み取る文字数&quot;);
                                addArgument(new Value(new Type(&quot;int&quot;), &quot;length&quot;));
                            }

                            public void implement() {
                                getData()
                                        .addLine(
                                                &quot;final String currentElementOnStack = (String) _elmentStack.peek();&quot;);

                                Enumeration enumeration = totalElementHashtable
                                        .keys();
                                for (boolean isFirst = true; enumeration
                                        .hasMoreElements(); isFirst = false) {
                                    StringBuffer lineStatement = new StringBuffer();
                                    String key = (String) enumeration
                                            .nextElement();

                                    getData()
                                            .addLine(
                                                    (isFirst ? &quot;&quot; : &quot;else &quot;)
                                                            + &quot;if (currentElementOnStack.equals(\&quot;&quot;
                                                            + key + &quot;\&quot;)) {&quot;);

                                    lineStatement
                                            .append(&quot;characters&quot;
                                                    + adjuster.toClassName(key)
                                                    + &quot;(new String(ch, start, length));&quot;);
                                    getData().addLine(lineStatement.toString());

                                    getData().addLine(&quot;}&quot;);
                                }
                            }
                        });

                        addMethod(new MethodExpander(&quot;ignorableWhitespace&quot;) {
                            public void setupSignature() {
                                setFinal(true);
                                getJavaDoc()
                                        .addLine(
                                                &quot;オリジナルのignorableWhitespaceが呼び出されたので、具象メソッドに呼びわけます&quot;);
                                getJavaDoc()
                                        .addLine(
                                                &quot;char[]で与えられたデータをStringに詰め替えた上で 呼びわけを行います。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;ch&quot;, &quot;XML文書の文字&quot;);
                                addArgument(new Value(new Type(&quot;char[]&quot;), &quot;ch&quot;));
                                getJavaDoc().addParameter(&quot;start&quot;, &quot;配列内の開始位置&quot;);
                                addArgument(new Value(new Type(&quot;int&quot;), &quot;start&quot;));
                                getJavaDoc().addParameter(&quot;length&quot;,
                                        &quot;配列から読み取る文字数&quot;);
                                addArgument(new Value(new Type(&quot;int&quot;), &quot;length&quot;));
                            }

                            public void implement() {
                                getData()
                                        .addLine(
                                                &quot;final String currentElementOnStack = (String) _elmentStack.peek();&quot;);

                                Enumeration enumeration = totalElementHashtable
                                        .keys();
                                for (boolean isFirst = true; enumeration
                                        .hasMoreElements(); isFirst = false) {
                                    StringBuffer lineStatement = new StringBuffer();
                                    String key = (String) enumeration
                                            .nextElement();

                                    getData()
                                            .addLine(
                                                    (isFirst ? &quot;&quot; : &quot;else &quot;)
                                                            + &quot;if (currentElementOnStack.equals(\&quot;&quot;
                                                            + key + &quot;\&quot;)) {&quot;);

                                    lineStatement
                                            .append(&quot;ignorableWhitespace&quot;
                                                    + adjuster.toClassName(key)
                                                    + &quot;(new String(ch, start, length));&quot;);
                                    getData().addLine(lineStatement.toString());

                                    getData().addLine(&quot;}&quot;);
                                }
                            }
                        });

                        addMethod(new MethodExpander(&quot;setDocumentLocator&quot;) {
                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                getJavaDoc().addLine(&quot;このメソッドを無視するためのメソッドです。&quot;);
                                addArgument(new Value(new Type(
                                        &quot;org.xml.sax.Locator&quot;), &quot;locator&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;startPrefixMapping&quot;) {
                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;prefix&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;uri&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;endPrefixMapping&quot;) {
                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;prefix&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;processingInstruction&quot;) {
                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;target&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;data&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;skippedEntity&quot;) {
                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;name&quot;));
                            }

                            public void implement() {
                            }
                        });
                    }

                    public void startPrefixMapping(String arg0, String arg1)
                            throws SAXException {
                    }

                    public void endPrefixMapping(String arg0)
                            throws SAXException {
                    }

                    /**
                     * startElementが呼び出された際に、一通りのメソッドの作成を行います。
                     */
                    public void startElement(final String uri,
                            final String localName, final String qName,
                            final Attributes atts) throws SAXException {

                        final ArrayList listAttr = new ArrayList();
                        elementStack.push(localName);
                        currentElementHashtable.put(&quot;localName&quot;, localName);

                        if (totalElementHashtable.get(localName) != null) {
                            // すでに登場したエレメントです。
                            // 処理はスキップします。
                            return;
                        }
                        totalElementHashtable.put(localName, listAttr);

                        addMethod(new MethodExpander(&quot;startElement&quot;
                                + adjuster.toClassName(localName)) {
                            // メソッドのシグニチャ指定
                            protected boolean isAbstract() {
                                return true;
                            }

                            public void setupSignature() {
                                getJavaDoc().addLine(
                                        &quot;startElementがローカル名[&quot; + localName
                                                + &quot;]で呼び出されました。&lt;br&gt;&quot;);
                                getJavaDoc().addLine(
                                        &quot;※ローカル名はメソッド名に含まれるので引数からは除かれています。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;uri&quot;, &quot;名前空間URI&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;uri&quot;));
                                getJavaDoc().addParameter(&quot;qName&quot;, &quot;接頭辞付きの修飾名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;qName&quot;));
                                final int attrLength = atts.getLength();
                                for (int index = 0; index &lt; attrLength; index++) {
                                    // System.out.println(atts.getLocalName(index)
                                    // + &quot;=&quot; + atts.getValue(index));
                                    getJavaDoc()
                                            .addParameter(
                                                    &quot;attr&quot;
                                                            + adjuster
                                                                    .toClassName(atts
                                                                            .getLocalName(index)),
                                                    &quot;アトリビュート[&quot;
                                                            + atts
                                                                    .getLocalName(index)
                                                            + &quot;]の値が渡されます。&quot;);
                                    addArgument(new Value(new Type(
                                            &quot;java.lang.String&quot;), &quot;attr&quot;
                                            + adjuster.toClassName(atts
                                                    .getLocalName(index))));
                                    listAttr.add(atts.getLocalName(index));
                                }
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;endElement&quot;
                                + adjuster.toClassName(localName)) {
                            protected boolean isAbstract() {
                                return true;
                            }

                            // メソッドのシグニチャ指定
                            public void setupSignature() {
                                getJavaDoc().addLine(
                                        &quot;endElementがローカル名[&quot; + localName
                                                + &quot;]で呼び出されました。&lt;br&gt;&quot;);
                                getJavaDoc().addLine(
                                        &quot;※ローカル名はメソッド名に含まれるので引数からは除かれています。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc().addParameter(&quot;uri&quot;, &quot;名前空間URI&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;uri&quot;));
                                getJavaDoc().addParameter(&quot;qName&quot;, &quot;接頭辞付きの修飾名&quot;);
                                addArgument(new Value(new Type(
                                        &quot;java.lang.String&quot;), &quot;qName&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;characters&quot;
                                + adjuster.toClassName(localName)) {
                            // メソッドのシグニチャ指定
                            protected boolean isAbstract() {
                                return true;
                            }

                            public void setupSignature() {
                                getJavaDoc().addLine(
                                        &quot;charactersがローカル名[&quot; + localName
                                                + &quot;]で呼び出されました。&lt;br&gt;&quot;);
                                getJavaDoc()
                                        .addLine(
                                                &quot;もとのcharactersメソッドでは char[]ですが、Stringに詰め替えた上でメソッドが呼び出されます。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc()
                                        .addParameter(&quot;data&quot;,
                                                &quot;java.lang.String型に詰め替え済みの charactersイベントデータ&quot;);
                                addArgument(new Value(new Type(&quot;String&quot;),
                                        &quot;data&quot;));
                            }

                            public void implement() {
                            }
                        });

                        addMethod(new MethodExpander(&quot;ignorableWhitespace&quot;
                                + adjuster.toClassName(localName)) {
                            // メソッドのシグニチャ指定
                            protected boolean isAbstract() {
                                return true;
                            }

                            public void setupSignature() {
                                getJavaDoc()
                                        .addLine(
                                                &quot;ignorableWhitespaceがローカル名[&quot;
                                                        + localName
                                                        + &quot;]で呼び出されました。&lt;br&gt;&quot;);
                                getJavaDoc()
                                        .addLine(
                                                &quot;もとのcharactersメソッドでは char[]ですが、Stringに詰め替えた上でメソッドが呼び出されます。&quot;);

                                addException(new Type(
                                        &quot;org.xml.sax.SAXException&quot;));
                                getJavaDoc()
                                        .addParameter(&quot;data&quot;,
                                                &quot;java.lang.String型に詰め替え済みの charactersイベントデータ&quot;);
                                addArgument(new Value(new Type(&quot;String&quot;),
                                        &quot;data&quot;));
                            }

                            public void implement() {
                            }
                        });
                    }

                    public void endElement(String uri, String localName,
                            String qName) throws SAXException {
                        currentElementHashtable.put(&quot;localName&quot;, elementStack
                                .pop());
                    }

                    public void characters(char[] ch, int start, int length)
                            throws SAXException {
                        // System.out.println(&quot;characters&quot;);
                    }

                    public void ignorableWhitespace(char[] arg0, int arg1,
                            int arg2) throws SAXException {
                        // System.out.println(&quot;ignorableWhitespace&quot;);
                    }

                    public void processingInstruction(String arg0, String arg1)
                            throws SAXException {
                    }

                    public void skippedEntity(String arg0) throws SAXException {
                        // System.out.println(&quot;skippedEntity&quot;);
                    }
                });

                try {
                    inStream = new FileInputStream(sourceFile);
                    TransformerFactory tf = TransformerFactory.newInstance();
                    Transformer transformer;
                    transformer = tf.newTransformer();
                    transformer.transform(new StreamSource(inStream), result);
                } catch (TransformerConfigurationException e) {
                    e.printStackTrace();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (TransformerException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        inStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
    }
}</pre></TD>
    </TR>
  </TBODY>
</TABLE>
<P>※このソースコードは開発途中段階のアイデアレベルのものです。最終的なもの、あるいは保守され続けていくものは <A HREF="http://www.igapyon.jp/blanco/blanco.ja.html" TITLE="blanco Framework は オープンソースで提供されている blancoDbやblancoStrutsなどの集合体です。基本的に Javaソースコード自動生成を主たる目的とします。">blanco</A>
Framework内の <A HREF="http://www.igapyon.jp/blanco/blancosoap.html" TITLE="「電文処理定義書」および「電文定義書」という Excelブックから、Webサービスを利用するためのソースコード等を自動生成します。">blancoSOAP</A> にて維持されていく予定です。</P>
<HR>
<address><A HREF="../memo/memoigapyon.html">いがぴょんについて</A><BR>
Last modified: $Date: 2010/09/27 20:42:49 $</address>
</BODY>
</HTML>
